{"ast":null,"code":"import{jsx as _jsx}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";import React from\"react\";import{useSetRecoilState,useRecoilValue}from'recoil';import FeatureState from'recoilStates/FeatureState';var FeaturesInput=function FeaturesInput(_ref){var placeholder=_ref.placeholder;var setFeature=useSetRecoilState(FeatureState);var feature=useRecoilValue(FeatureState);var onChange=function onChange(event){var _event$target=event.target,name=_event$target.name,value=_event$target.value;if(name===\"just\"){setFeature(value);}};return/*#__PURE__*/_jsx(_Fragment,{children:/*#__PURE__*/_jsx(\"input\",{name:\"just\",onChange:onChange,value:feature,placeholder:placeholder,required:true})});};export default FeaturesInput;","map":{"version":3,"sources":["/Users/leesangsu/문서/GitHub/luminouss-admin/src/components/molecules/FeaturesInput.js"],"names":["React","useSetRecoilState","useRecoilValue","FeatureState","FeaturesInput","placeholder","setFeature","feature","onChange","event","target","name","value"],"mappings":"gGAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,OAAQC,iBAAR,CAA2BC,cAA3B,KAAgD,QAAhD,CACA,MAAOC,CAAAA,YAAP,KAAyB,2BAAzB,CAEA,GAAMC,CAAAA,aAAa,CAAG,QAAhBA,CAAAA,aAAgB,MAAqB,IAAlBC,CAAAA,WAAkB,MAAlBA,WAAkB,CACvC,GAAMC,CAAAA,UAAU,CAAGL,iBAAiB,CAACE,YAAD,CAApC,CACA,GAAMI,CAAAA,OAAO,CAAGL,cAAc,CAACC,YAAD,CAA9B,CAEA,GAAMK,CAAAA,QAAQ,CAAG,QAAXA,CAAAA,QAAW,CAACC,KAAD,CAAW,mBAKtBA,KALsB,CAEtBC,MAFsB,CAGlBC,IAHkB,eAGlBA,IAHkB,CAGZC,KAHY,eAGZA,KAHY,CAM1B,GAAID,IAAI,GAAK,MAAb,CAAqB,CACnBL,UAAU,CAACM,KAAD,CAAV,CACD,CACJ,CATC,CAUF,mBACE,sCACE,cAAO,IAAI,CAAC,MAAZ,CAAmB,QAAQ,CAAEJ,QAA7B,CAAuC,KAAK,CAAED,OAA9C,CAAuD,WAAW,CAAEF,WAApE,CAAiF,QAAQ,KAAzF,EADF,EADF,CAKD,CAnBD,CAqBA,cAAeD,CAAAA,aAAf","sourcesContent":["import React from \"react\";\nimport {useSetRecoilState, useRecoilValue} from 'recoil';\nimport FeatureState from 'recoilStates/FeatureState';\n\nconst FeaturesInput = ( {placeholder} ) => {\n    const setFeature = useSetRecoilState(FeatureState);\n    const feature = useRecoilValue(FeatureState);\n\n    const onChange = (event) => {\n      const {\n          target: {\n              name, value\n          }\n      } = event;\n      if (name === \"just\") {\n        setFeature(value);\n      }\n  }; \n  return (\n    <>\n      <input name=\"just\" onChange={onChange} value={feature} placeholder={placeholder} required/>\n    </>\n  );\n};\n\nexport default FeaturesInput;"]},"metadata":{},"sourceType":"module"}