{"ast":null,"code":"var _jsxFileName = \"/Users/leesangsu/\\u1106\\u116E\\u11AB\\u1109\\u1165/GitHub/luminouss-web/src/components/pages/Home.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { Link, useHistory } from \"react-router-dom\";\nimport \"components/styles/Home.css\";\nimport firebase from \"global/fbase\";\nimport { useRecoilValue, RecoilRoot } from 'recoil';\nimport RoadNameState from 'recoilStates/RoadNameState';\nimport FirestoreData from 'components/molecules/FirestoreData';\n\nconst Home = ({\n  isLoggedIn\n}) => {\n  _s();\n\n  //prop 바뀌면 리렌더링 isLoggedIn state 바뀌어서\n  const history = useHistory(); //login 안 된 경우, 로그인 필요합니다 알러트 띄우기\n\n  const onClick = event => {\n    event.preventDefault();\n\n    if (isLoggedIn) {\n      history.push('/add-road-info');\n    } else {\n      window.alert(\"Login required\");\n      history.push('sign-in');\n    }\n  }; // const arr = useRecoilValue(RoadNameState);\n\n\n  const [arr, setArr] = useState([]);\n\n  const getWalkRoadInfo = async () => {\n    const res = await firebase.firestore().collection('WalkRoad').get();\n    res.forEach(doc => {\n      const arrObj = { ...doc.data().roadName,\n        id: doc.id\n      };\n      setArr(prev => [arrObj, ...prev]);\n    }); // console.log(arr); // 여러번 들어가면 위험\n    // catch(error){\n    //     console.log(error);\n    // }\n  }; // 화면 켜질때 딱 한번만 array에 담는걸 어떻게 할까.. \n\n\n  useEffect(() => {\n    getWalkRoadInfo();\n  }, []);\n  return /*#__PURE__*/React.createElement(RecoilRoot, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"mainContainer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    className: \"mainTitle\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 17\n    }\n  }, \"\\uC2DC\\uAC01\\uC7A5\\uC560\\uC778\\uC758 \\uB208\\uACFC \\uBC1C\\uC774 \\uB418\\uC5B4\\uC8FC\\uC138\\uC694.\"), /*#__PURE__*/React.createElement(\"h3\", {\n    className: \"explanation\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 17\n    }\n  }, \"\\uBB38\\uC81C \\uC124\\uBA85...\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"linkBox\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"addWalkway_text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 21\n    }\n  }, \"\\uC0B0\\uCC45\\uB85C \\uC815\\uBCF4 \\uCD94\\uAC00\\uD558\\uAE30\"), /*#__PURE__*/React.createElement(Link, {\n    to: \"/add-road-info\",\n    className: \"addWalkway\",\n    onClick: onClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 21\n    }\n  }, \"+\")), arr ? arr.map(roadName => /*#__PURE__*/React.createElement(\"div\", {\n    key: roadName.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 46\n    }\n  }, /*#__PURE__*/React.createElement(\"h4\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 21\n    }\n  }, roadName))) : /*#__PURE__*/React.createElement(\"h5\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 26\n    }\n  }, \"\\uC0B0\\uCC45\\uB85C \\uC815\\uBCF4 \\uBD88\\uB7EC\\uC624\\uB294 \\uC911..\"), console.log(arr)));\n};\n\n_s(Home, \"1iD/UmMu5WyOQuJ59yJhxaams28=\", false, function () {\n  return [useHistory];\n});\n\n_c = Home;\nexport default Home;\n\nvar _c;\n\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"sources":["/Users/leesangsu/문서/GitHub/luminouss-web/src/components/pages/Home.js"],"names":["React","useEffect","useState","Link","useHistory","firebase","useRecoilValue","RecoilRoot","RoadNameState","FirestoreData","Home","isLoggedIn","history","onClick","event","preventDefault","push","window","alert","arr","setArr","getWalkRoadInfo","res","firestore","collection","get","forEach","doc","arrObj","data","roadName","id","prev","map","console","log"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from \"react\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport \"components/styles/Home.css\"\r\nimport firebase from \"global/fbase\";\r\nimport { useRecoilValue, RecoilRoot } from 'recoil';\r\nimport RoadNameState from 'recoilStates/RoadNameState';\r\nimport FirestoreData from 'components/molecules/FirestoreData';\r\n\r\n\r\nconst Home  = ({ isLoggedIn }) => { //prop 바뀌면 리렌더링 isLoggedIn state 바뀌어서\r\n    const history = useHistory();\r\n    //login 안 된 경우, 로그인 필요합니다 알러트 띄우기\r\n    const onClick = (event) => {\r\n        event.preventDefault();\r\n        if (isLoggedIn){\r\n            history.push('/add-road-info');\r\n        } else {\r\n            window.alert(\"Login required\");\r\n            history.push('sign-in');\r\n        }\r\n    };\r\n    // const arr = useRecoilValue(RoadNameState);\r\n    const [arr, setArr]= useState([]);\r\n\r\n    const getWalkRoadInfo = async () => {\r\n            const res = await firebase.firestore().collection('WalkRoad').get()\r\n    \r\n            res.forEach((doc) => {\r\n                const arrObj = {\r\n                    ...doc.data().roadName,\r\n                    id:doc.id,\r\n                };\r\n                setArr((prev) => [arrObj, ...prev]);\r\n            });\r\n                // console.log(arr); // 여러번 들어가면 위험\r\n        \r\n        // catch(error){\r\n        //     console.log(error);\r\n        // }\r\n    };\r\n     \r\n    // 화면 켜질때 딱 한번만 array에 담는걸 어떻게 할까.. \r\n    useEffect(() => {\r\n        getWalkRoadInfo();\r\n    }, [])\r\n \r\n    return (\r\n        <RecoilRoot>\r\n            <div className=\"mainContainer\">\r\n                <h1 className=\"mainTitle\">\r\n                    시각장애인의 눈과 발이 되어주세요.\r\n                </h1>\r\n                <h3 className=\"explanation\">\r\n                    문제 설명...\r\n                </h3>\r\n\r\n                <div className=\"linkBox\">\r\n                    <div className=\"addWalkway_text\">산책로 정보 추가하기</div>\r\n                    <Link to=\"/add-road-info\" className=\"addWalkway\" onClick={onClick}>\r\n                        +\r\n                    </Link>\r\n                </div>\r\n                {arr ? arr.map((roadName) => <div key={roadName.id}>\r\n                    <h4>{roadName}</h4>\r\n                </div> ):<h5>산책로 정보 불러오는 중..</h5>}\r\n                {/* {console.log(newArr)} */}\r\n                {console.log(arr)}\r\n            </div>\r\n        </RecoilRoot>\r\n    );\r\n};\r\n\r\nexport default Home;"]},"metadata":{},"sourceType":"module"}